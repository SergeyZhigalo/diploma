-- phpMyAdmin SQL Dump
-- version 4.9.7
-- https://www.phpmyadmin.net/
--
-- Host: localhost:8889
-- Generation Time: May 28, 2021 at 05:57 PM
-- Server version: 5.7.32
-- PHP Version: 7.4.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `diploma`
--

-- --------------------------------------------------------

--
-- Table structure for table `administration`
--

CREATE TABLE `administration` (
  `id_user` int(11) NOT NULL,
  `login` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `administration`
--

INSERT INTO `administration` (`id_user`, `login`, `password`) VALUES
(1, 'admin', '$2y$10$GU6HJpRmKM/uvJ7hmEtL5.G7oSwi5VK9wr/57AdXLMGZuisZdnLm2');

-- --------------------------------------------------------

--
-- Table structure for table `courses`
--

CREATE TABLE `courses` (
  `id_courses` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `logo` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `counter` int(11) NOT NULL DEFAULT '0',
  `counterMax` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `courses`
--

INSERT INTO `courses` (`id_courses`, `name`, `logo`, `description`, `counter`, `counterMax`) VALUES
(1, 'Веб-разработка', 'fas fa-mouse-pointer', 'Веб-разработчик создаёт сайты: поисковики, соцсети, банковские приложения. Он отвечает как за внешний вид сайта, так и за его логику: работу серверов, файлов и баз данных. Если убрать веб-разработчиков, бизнес перестанет зарабатывать в интернете.', 1, 30),
(2, 'iOS-разработка', 'fab fa-apple', 'Создавайте приложения для Apple, даже если раньше никогда программировали. Вы освоите разработку на Swift.', 2, 30),
(3, 'Тестирование ПО', 'fas fa-bug', 'Освойте профессию тестировщика с нуля. Вы получите всё для старта карьеры: навыки ручного тестирования, практику автоматизации на Java и опыт работы с веб-приложениями.', 1, 30),
(4, 'SEO-продвижение', 'fas fa-search', 'Вы станете специалистом, который сможет самостоятельно продвигать сайт. SEO-специалисты востребованы как в digital- агентствах, так и на фрилансе. Вы научитесь составлять семантическое ядро и использовать аналитику, работать с HTML, CSS и инструментами интернет-маркетинга и проджект-менеджмента.', 3, 30),
(5, 'Python-разработка', 'fab fa-python', 'Получите одну из самых востребованных IT-профессий. Вы освоите Python, научитесь писать программы и веб-приложения.', 2, 30),
(6, 'Data Engineering', 'fas fa-database', 'Вы научитесь собирать и обрабатывать данные, проектировать хранилища и работать с инфраструктурой. Повысите квалификацию и уровень дохода.', 2, 30);

-- --------------------------------------------------------

--
-- Table structure for table `enrollment`
--

CREATE TABLE `enrollment` (
  `id_record` int(11) NOT NULL,
  `id_courses` int(11) NOT NULL,
  `id_user` int(11) NOT NULL,
  `status` tinyint(1) DEFAULT '1'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `enrollment`
--

INSERT INTO `enrollment` (`id_record`, `id_courses`, `id_user`, `status`) VALUES
(1, 1, 1, 0),
(2, 4, 1, 0),
(3, 5, 1, 1),
(4, 4, 2, 1),
(5, 2, 2, 1),
(6, 6, 2, 1),
(7, 5, 2, 1),
(12, 2, 3, 1),
(13, 4, 3, 1),
(14, 6, 3, 1),
(15, 3, 3, 1);

-- --------------------------------------------------------

--
-- Table structure for table `news`
--

CREATE TABLE `news` (
  `id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `rubric` varchar(255) NOT NULL,
  `date` date NOT NULL,
  `preview` text NOT NULL,
  `newsText` text NOT NULL,
  `video` text NOT NULL,
  `photoCounter` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `news`
--

INSERT INTO `news` (`id`, `title`, `rubric`, `date`, `preview`, `newsText`, `video`, `photoCounter`) VALUES
(1, 'Как управлять временем в период обучения?', 'Без рубрики', '2021-04-01', 'Между \"учиться много\" и \"учиться успешно\" не всегда можно поставить знак равенства. Наверняка вы слышали истории о людях, самостоятельно и оперативно изучивших какую-либо науку/язык программирования/музыкальный инструмент. Причем сделали это настолько качественно, что заткнули за пояс многих профессионалов.', 'Между \"учиться много\" и \"учиться успешно\" не всегда можно поставить знак равенства. Наверняка вы слышали истории о людях, самостоятельно и оперативно изучивших какую-либо науку/язык программирования/музыкальный инструмент. Причем сделали это настолько качественно, что заткнули за пояс многих профессионалов.\r\nВ чем же успех таких людей? Талант? Возможно. Усердие? Не без этого. Но в то же время их успех был бы невозможен без продуктивного использования отпущенного времени. Причем как во время работы, так и во время обучения. Возьмите, к примеру, Дэвида Ханемайера Хенсона – одного из основателей 37signals, чьими продуктами являются Basecamp и Ruby On Rails. По словам предпринимателя, в сутки он работает не больше 5 часов. Но при этом использует их максимально эффективно. Для того же, чтобы ему уподобиться, необязательно владеть древними тайнами. Напротив, достаточно следовать нескольким простым советам, указанным ниже. \r\nСоставьте график, учитывающий ваши особенности\r\nНикто из нас не выращен на фабрике, все мы индивидуальны. Одним из множества отличий является разница в пике продуктивности. Кто-то лучше всего работает с утра, проснувшись и выпив чашку кофе. Другому необходимо несколько часов для того, чтобы \"разогнаться\". Третий активизируется ближе к заходу солнца. Ну а четвертый и вовсе предпочитает трудиться под пеленой ночной тишины.\r\nВо время же составления личного расписания необходимо учитывать время \"Ч\". Разумеется, у того, кто совмещает учебу с работой и/или семейными хлопотами, могут возникнуть сложности. Тем не менее, по возможности стоит перестроить режим дня таким образом, чтобы основная масса обучения приходилась на самое продуктивное время суток.\r\nРасставляйте приоритеты\r\nВ карьере разработчика вы не раз столкнетесь (или уже сталкиваетесь) с понятием \"приоритет\". К примеру, во время исправления багов. Естественно, чем выше приоритет, тем раньше стоит браться за дефект. Ведь если большое количество маленьких ошибок пользователи приложения либо не заметят, либо не предадут значения, то один критический баг больно ударит по репутации вашей компании. В конце концов, старый и не покрашенный, но работающий автомобиль ценится выше красавицы с кожаным салоном, но неисправным двигателем и сломанной коробкой передач.  \r\nПо сути, тот же принцип действует и во время обучения. Еще до его начала необходимо расставить приоритеты – и в первую очередь приступить к изучению того, без чего немыслима ваша будущая профессия. Как определить, что входит в группу \"жизненно необходимо\"? Посмотрите открытые вакансии, пообщайтесь с опытными разработчиками и, таким образом, определите, какие навыки вам необходимы, какие – желательны, а без каких вполне можно обойтись.\r\nНе распыляйтесь\r\nВ последнее время многозадачность является чуть ли не обязательным условием для приема на работу. Мол, сотрудник обязан переключаться с одной задачи на другую без ущерба для результата. Проблема в том, что ущерба при этом… не избежать. В частности, как гласят исследования Американской психологической ассоциации, продуктивность работы в условиях многозадачности падает на 20-40%. Естественно, данный постулат действителен и для процесса обучения. Нет желания в сотый раз вспоминать поговорку о двух зайцах. Но все-таки для того, чтобы не оказаться на месте незадачливого охотника, необходимо всячески избегать \"распыления\".\r\nОтдыхайте\r\nМало кто может бегать на протяжении нескольких часов – и при этом не уставать. Мало кто может работать треть суток без перерыва, не теряя эффективности. Наконец, практически никто не может впитывать новую информацию на протяжении сотен минут.\r\nТогда мы упомянули исследования Эббингауза, доказавшего, что осознанное запоминание в 9 раз эффективнее неосознанного. Иными словами: если вы теряете концентрацию, пропускаете информацию мимо ушей и глаз, читаете одно и то же предложение несколько раз, по-прежнему не улавливая смысл, – сделайте перерыв. Как-никак непрерывной учебой/работой вы никому ничего не докажете – лишь навредите себе. В то время как пятиминутного \"кофе-брейка\" на каждый час занятий обычно хватает для перезагрузки.\r\nПланируйте\r\nПриступив к занятиям, вы можете вслепую блуждать по неизведанной территории, а можете составить план, который поможет вам организовать процесс обучения. К примеру, изучая HTML, вы можете отвести час на освоение простых форм, 30 минут – на ссылки, 15 – на заголовки и так далее. Такой подход поможет вам избежать упомянутой многозадачности и в целом организует учебный процесс. Кроме того, по прошествии какого-то времени вы сможете пересмотреть дневники и будете точно знать, каким сферам уделяли внимание позавчера, на прошлой неделе или месяц назад. То есть фактически вы влезете в шкуру преподавателя, который в то же время является и учеником.', '', 0),
(2, 'Как запомнить новую информацию?', 'Без рубрики', '2021-04-01', 'Успешному освоению программирования, как и любого другого предмета, может помешать свойственная человеку забывчивость. Тем не менее, существует несколько простых приемов, которые помогут вам лучше запомнить новую информацию.', 'Успешному освоению программирования, как и любого другого предмета, может помешать свойственная человеку забывчивость. Тем не менее, существует несколько простых приемов, которые помогут вам лучше запомнить новую информацию.\r\nУчитесь ежедневно\r\nКлассический рекламный слоган гласит: одного-двух занятий в неделю достаточно для быстрого изучения иностранного языка, игры на гитаре или контролю разума, практикуемого джедаями. Тем не менее, наверняка вы знакомы с ситуацией: слушая интересующую вас лекцию либо участвуя в практических занятиях, вы уверены, что никогда не забудете увлекательный материал. Однако спустя несколько дней, придя на следующую лекцию, вы практически не помните предыдущую.\r\nВ подобной забывчивости нет вины внешних факторов. Это не проделки мифического существа, не следствие жизни в информационном веке и не признаки проблем с памятью. Напротив, таково, как бы громко это ни звучало, строение нашего мозга.\r\nТак, еще 130 лет назад немецкий (какой же еще?) психолог Эббингауз построил так называемую \"кривую забывания\". Тем самым он математически вывел то, что вы и без того прекрасно знаете: количество запоминаемой информации уменьшается с течением времени. Как быстро? Вынуждены вас расстроить: как бы усердно вы не слушали преподавателя или не вчитывались в каждую строчку, в течение часа вы забудете более половины изученного. Спустя сутки вы будете помнить порядка 33%, а через 5-6 дней – всего 20%.\r\nКакой следует вывод? Да, с забыванием части материала можно лишь смириться. Но при этом существует легкий способ значительно увеличить объем запоминаемой информации – ежедневные занятия.\r\nТаким образом, непродолжительное, но ежедневное обучение полезнее долгих, но редких \"тренировок\".\r\nОсвежайте голову\r\nПрекрасно, если вы способны уделять обучению по 4-5 часов в день. Но не переусердствуйте. Задайтесь вопросом: как часто вы, находясь в состоянии выжатого лимона, не понимали ничего из того, что говорят окружающие, теряли сюжетные нити при просмотре фильма либо глядели в книгу и видели в ней известную комбинацию пальцев?\r\nПодобной потери концентрации также есть объяснение. Все тот же Эббингауз выявил, что осознанное запоминание в 9 (!) раз эффективнее неосознанного. Банально, но для того, чтобы запоминать новый материал, его нужно понимать. Иными словами: если вы раздосадованы, выхолощены, отвлекаетесь на внешние раздражители, читаете между строк и слушаете одним ухом – учить новый материал в принципе бессмысленно. Тем самым вы делаете себе лишь медвежью услугу. Поэтому если вы достигли точки, после которой с огромным трудом усваиваете новую информацию, лучше закройте ноутбук, выпейте чай, прогуляйтесь или прилягте на диван. В общем, освежите голову и наберитесь сил. После чего вернитесь к обучению, но уже во всеоружии.\r\nПовторяйте изученное\r\nНе хочется лишний раз упоминать о том, чьей заботливой матерью является повторение. Но все же следует помнить: повторение – важнейший аспект изучения новой информации. Мало кто может выучить стихотворение, прочитав его лишь раз, или сыграть на фортепиано впервые услышанную мелодию. В обучении программированию (как и любому другому предмету) действует тот же принцип: периодическое повторение позволит в разы увеличить объем запоминаемой информации.\r\nНе думайте, что материал не пригодится\r\nВ школе мы частенько игнорировали отдельные предметы. Особенно после того, как окончательно определялись с профессией. Будущие филологи халатно относились к физике. Математики не тратили силы на изысканные сочинения по литературе. Ну а биологи не вдавались в подробности всемирной истории. Однако по мере взросления мы все реже можем позволить себе роскошь игнорирования. Особенно при изучении предмета, связанного с нынешней или будущей деятельностью.\r\nДопустим, вы изучаете HTML и застопорились на верстке таблиц. Не желая уделять малоинтересной главе много времени, вы убеждаете себя, что данные приемы вам не нужны (мол, кому могут понадобиться таблицы?). Как следствие, относитесь к разделу с прохладцей, практически ничего не запоминая.\r\nВозможно, вы окажетесь правы. Возможно, вы действительно ни разу не столкнетесь с этим. Но ведь есть и неприятная альтернатива. Представьте, что вам поручили сверстать таблицы для крупного сайта в краткие сроки – и вместо того, чтобы с легкостью воплотить в жизнь усвоенный материал, вы будете судорожно рыться в поисковиках и осваивать новые технологии на лету. И хорошо, если сомнительное предприятие закончиться \"хэппи-эндом\". Хуже, если былая халатность в обучении в итоге вызовет гнев начальника, недовольство заказчика или еще хуже – срыв сроков сдачи.\r\nВывод, думается, очевиден: не нужно считать, что изучаемый материал вам не пригодится. Мало того, что с такой внутренней установкой невозможно ничего запомнить, так и само обучение, по сути, лишается смысла. И если наши выводы не кажутся убедительными, вспомните персонажа Джима Керри из фильма \"Всегда говори \"Да\", доказавшего: ни одно знание не бывает лишним.', '', 0),
(3, 'Git – что это?', 'Без рубрики', '2021-04-01', 'Зачем нужен Git? Без Git-а или его аналога не обходится ни одна командная разработка. Система полезна не только команде, но и отдельным разработчикам.', 'Зачем нужен Git? Без Git-а или его аналога не обходится ни одна командная разработка. Система полезна не только команде, но и отдельным разработчикам.\r\nGit – распределенная система контроля версиями, была создана  Линусом Торвальдсом, чтобы управлять разработкой ядра Линукс. На сегодняшний день многие проекты используют Git. Среди них PHP, jQuery, Wine, Android, Qt, Drupal и другие.\r\nСистема выпущена под лицензией GNU GPL и является, по сути, набором программ, очень удобных для разработки. Поддерживает нелинейную историю разработки проекта, фиксируя образ системы проекта на данный момент, т.е. то, как выглядят все файлы разработки в конкретный момент времени. Если какой-то файл не изменился с течением времени, он не дублируется, на него просто делается ссылка. Это позволяет повысить эффективность системы.\r\nУстанавливать Git можно и на Linux,  и на Mac, и на Windows. Главная задача  - это правильная настройка системы. Git достаточно гибкая, что даёт возможность реализации практически любых клиентов с интерфейсом по желанию.\r\nПеред началом командной разработки создается репозиторий с доступом к нему по сети. Когда разработчик посчитал, что нужный код готов и написан, он выгружает его в репозиторий. Код становится доступным остальным участникам команды, которые, обратившись к репозиторию, получают актуальную версию. Таким образом, Git хранит историю проекта: авторство и историю изменения вашей разработки с возможностью отката к предыдущей версии. Присутствует возможность контроля доступа к коду. Большим удобством является возможность работы с несколькими версиями разработки одновременно.\r\nБольшинство операций системы контроля версий Git производится в локальном репозитории. История проекта также хранится на локальном ПК и делает доступ к ней максимально быстрым. Постоянное соединение с сервером системе не требуется, поэтому вы можете работать независимо от наличия постоянного канала связи. Это актуально в случаях плохого интернет-коннекта. Весьма полезной функцией Git-a является отслеживание целостности файлов. Система постоянно следит за контрольными сумами, что даёт большую надежность и актуальность текущего проекта.\r\nНесомненное удобство системы контроля версий – это ветвление: возможность параллельной разработки нескольких версий ПО.   На простом примере это можно сравнить с большим паззлом, например, на 3 тысячи кусков, который собирают 10 человек. Каждый участник сборки складывает свой кусок картинки и, когда он её сложит, этот кусок (ветку) ему необходимо прикрепить к общей картинке. Теперь представьте, что этот паззл с картинкой автомобиля. Пока вы собирали свой кусок, у автомобиля поменялся дизайн фары – так вот та ветка, которая отвечала за фару, имеет возможность быть выключенной и быть собранной по-другому и вставиться целиком. Что же такое Git - его смысл и заключается как раз в этом: есть центральная линия, на которой всё понятно и всё работает. В нашем случае это рабочая оттестированная версия программы, которую в любой момент можно показать заказчику или отдать пользователям, и есть боковые ветки, где производится доработка или изменения, которую, кроме самих разработчиков и лиц, имеющих доступ к коду, не видит никто.\r\nЕсли в процессе работы с ветками случается конфликт при слиянии версий, то вы имеете возможность разобраться с его причиной, принять решение о слиянии или не слиянии того, что есть в главной ветке и тем, что наработали вы и дать конечные исправления.\r\nВозникающие ошибки легко отследить и установить, где, когда, кем и почему они были сделаны. С изменениями также весьма удобно работать – в системе присутствует широкая возможность комментирования.\r\nМногие пользователи почему-то испытывают боязнь в создании новых веток. Этого делать не нужно,  как раз наоборот: все изменения следует проводить сначала на отдельной ветке, потом выкладывать их в основную и только после этого уже принимать решение о внедрении в стабильную версию программы.\r\nСуществуют не только графические, но и консольные версии git-клиентов. Они в большинстве случаев удобны для использования на серверах. Консольная версия отличается только отсутствием графического интерфейса. Все остальные действия и команды – аналогичны.\r\nВ результате, используя Git, вы получаете удобную среду, как для командной работы, так и для одиночной, имея под рукой возможность сохранять несколько версий программы, держать отдельно главную ветвь, оттестированную и работоспособную и видеть всю историю написания проекта, с возможностью откатиться куда вам необходимо или изменить направление разработки с любой существующей точки.', '', 0),
(4, '5 правил карьерного роста для тихонь', 'Без рубрики', '2021-04-01', 'Еще вчера вы спали на парах, думали исключительно о планах на выходные, а сегодня жизнь выбросила на дорожку взрослой жизни с мыслями о вечном. Вы не участвовали в художественной самодеятельности, не были старостой группы, да и вообще не привыкли приковывать к себе внимание. ', 'Еще вчера вы спали на парах, думали исключительно о планах на выходные, а сегодня жизнь выбросила на дорожку взрослой жизни с мыслями о вечном. Вы не участвовали в художественной самодеятельности, не были старостой группы, да и вообще не привыкли приковывать к себе внимание. Теперь же хочется много денег и безмерного уважения новых коллег и начальства — но вы понятия не имеете, как этого добиться в кратчайшие сроки с характером тихони, да еще и в должности младшего программиста/разработчика/инженера. Вот несколько советов в помощь:\r\n1. Работайте. А когда концентрация потеряна — делайте вид. Да, это непросто, хочется по привычке болтать с соседом, копаться в телефоне, а каждые полтора часа устраивать себе 10-минутный перерыв. Никто за вами не следит, дедлайны не поджимают, как тут собраться? Но это единственный путь к тому, чтобы как можно быстрее показать себя ответственным исполнителем. Нет работы? Просите. Не дают? Уходите. В месте, где приоритетны покой и размеренность, блестящей карьеры не сделать.\r\n2. Никаких раскачиваний. Первое, что слышит любой молодой специалист — призывы посмотреть по сторонам, ознакомиться с проектами, почитать документацию. Знайте, у вас на это один-два дня. Иногда речь идет о часах. Не надо сидеть неделю, а то и месяц с умным видом в периоде адаптации. Даже если в новом деле вы ничего не понимаете — гораздо лучше сразу взять быка за рога реальное дело и разобраться во всем по ходу работы.\r\n3. Будьте понятным. Да, вы программист, и единственное важное в вашей работе — результат. Но у вас есть начальник, у него свой начальник, а ещё где-то сидит заказчик. И все хотят во всем разбираться, всё понимать, даже при отсутствии знаний в конкретной области. Поэтому не пренебрегайте комментариями, блок-схемами, сопроводительными записками, давайте понятные имена проектам, файлам, переменным и операциям. В конце концов, как еще оценить ваш непосильный труд?\r\n4. Корпоративный дух. Даже тихоне иногда надо открывать рот, чтобы здороваться с коллегами, своим начальством, чужим, да вообще со всеми, с кем может в будущем свести работа. Потратьте полчаса, чтобы выучить имена и должности окружающих и смело применяйте их в общении и деловых переписках. Ведь чем больше рук вам подадут при восхождении при карьерной лестнице — тем быстрее будет путь. Кроме того, не пренебрегайте корпоративными правилами, хотя бы первое время не опаздывайте и не убегайте домой по звонку. \r\n5. Вечный студент. Никогда не останавливайтесь в развитии. Дайте понять вашему начальнику, что не хотите делать одно и то же всю жизнь. Читайте профессиональные книги, интересуйтесь новыми веяниями, повышайте квалификацию, посещайте семинары и выставки. Так вы обзаведетесь широким диапазоном навыков, получите массу деловых знакомств. Все это в худшем случае позволит легко сменить место работы, а в лучшем — привлечет внимание верхушек вашей компании и, возможно, позволит получить новую должность в обход непосредственного руководителя.', '', 0),
(5, '10 советов, как быстро выучить технический английский', 'Без рубрики', '2021-04-01', 'На английском говорит более 400 млн. человек по всему миру и еще 1,5 млрд. используют его как второй язык. Вся документация программирования изначально на английском, 5-ти миллионное комьюнити Stack Overflow общается на английском.', 'На английском говорит более 400 млн. человек по всему миру и еще 1,5 млрд. используют его как второй язык. Вся документация программирования изначально на английском, 5-ти миллионное комьюнити Stack Overflow общается на английском. Интересные и денежные заказы, топовые работодатели, свежие новости из IT сферы и многое другое закрыто для разработчиков, которые не владеют этим языком. Знание английского — обязательное условие для успешного трудоустройства и карьерного роста программиста.\r\nЗанимайтесь каждый день\r\nЭто актуально для каждого, кто хочет быстро изучить иностранный язык. Не ищите оправдания в устоявшихся фразах наподобие: “пять минут ничего не решают”. За это время можно прочесть новость на английском, выучить несколько слов или посмотреть тематический ролик. Ищите возможности, а не отговорки. Скачайте аудиокнигу на английском, чтобы слушать, пока едете в метро, или обучающее языку приложение, с помощью которого можно с пользой провести эти пять минут.\r\nУчите слова по темам\r\nДля лучшего запоминания изучайте слова в контексте употребления. Например, чтобы овладеть английской терминологией по теме “Алгебра множеств” ознакомьтесь с тематическими статьями и выделите неизвестные слова. После этого практикуйте их, изучая материалы по теме, пока не сможете обходиться без словаря. Такой способ изучения позволит понять оттенки значений слов, чего невозможно добиться просто заучивая словарь.\r\nПравильно ставьте цели\r\n“Выучить технический английский” — слишком абстрактная цель. Новые слова появляются ежедневно и всех тонкостей не знают даже носители. А когда что-то слишком абстрактно, то невозможно понять качество результата, из-за этого нет мотивации. Поэтому ставьте конкретные, измеримые цели, например: “Выполнить небольшой заказ от англоязычного работодателя”, “Прочесть такую-то книгу по Java на английском”, “Знать 100 технических терминов”, “Попросить совета на англоязычном ресурсе.”\r\nЧитайте англоязычные IT форумы\r\nЗдесь можно набраться актуальных выражений, которые используют программисты по всему миру при неформальном общении. Это не просто веселая прихоть. Знание тонкостей будет важно для последующего общения с зарубежными коллегами и заказчиками.\r\nПодпишитесь на англоязычных программистов в социальных сетях\r\nВо-первых, это неиссякаемый источник новых слов и выражений. Во-вторых, вы будете “в теме” последних событий и новинок из мира IT.\r\nСмотрите тематические видео \r\nЗнания лексики без умения воспринимать на слух недостаточно. Для того, чтобы успешно общаться с зарубежными заказчиками и коллегами, нужно уметь воспринимать язык на слух. Для того, чтобы приобрести этот навык, советуем смотреть видео с конференций, хакатонов, презентаций. Главное правило — максимум живого общения. Фильмы, сериалы, программы полезны, но они не дадут такого эффекта, как знакомство с “не фильтрованной” речью. Можно слушать и аудиозаписи, но просмотр видео создает эффект полного погружения в языковую среду, отслеживается все, вплоть до характерных жестов и особенностей мимики говорящего.\r\nРегулярно повторяйте пройденный материал\r\nЧеловек хорошо помнит только то, что он использует. Данный факт обусловлен тем, что мозг считает не применяемый длительное время навык не релевантным. Поэтому очень важно иногда повторять даже давно изученные и очевидные слова и выражения. Лучше, если это будет на практике.\r\nНе углубляйтесь в грамматику\r\nУчите грамматику попутно с лексикой, это даст более глубокое понимание языка и его структур. Когда маленькие дети учатся говорить, то им не вдалбливают десятки правил по употреблению артиклей (хотя, к сожалению, зачастую при изучении языков в школе это именно так), они просто смотрят, как это делают другие и повторяют за ними.\r\nНе учите через силу\r\nСделать приятным можно изучение даже сухого технического языка. Найдите интересную вам специфическую тему или новость на английском и постарайтесь ее перевести. Когда вы понимаете, что это принесет вам результат уже сейчас, например, в виде новых знаний о технологиях, то это очень мотивирует.\r\nПрактикуйтесь\r\nОб этом говорят все, но не многие пользуются этим обязательным правилом. Отсутствие языкового барьера, умение быстро переключаться на разговорный режим и подбирать нужные слова — одни из самых важных индикаторов владения языком на продвинутом уровне. Ищите любые возможности, чтобы говорить. Например, можно пообщаться с носителями языка в текстовых и видеочатах.', '', 0);

-- --------------------------------------------------------

--
-- Table structure for table `rubric`
--

CREATE TABLE `rubric` (
  `rubric` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `rubric`
--

INSERT INTO `rubric` (`rubric`) VALUES
('null'),
('Без рубрики'),
('Поездки'),
('Чтения');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id_user` int(11) NOT NULL,
  `login` varchar(255) NOT NULL,
  `phone` varchar(100) NOT NULL,
  `email` varchar(255) NOT NULL,
  `password` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id_user`, `login`, `phone`, `email`, `password`) VALUES
(1, 'login', '+7(111)111-11-11', 'mail@mail.com', '$2y$10$pZcRFi.t/L5eEtxgSnKMZuONktGsUlYBx1P8bCMZqsgEW723JMMvC'),
(2, 'login', '+7(222)222-22-22', 'email@email.com', '$2y$10$XZZ12hsQjvE9jP6.Gm50Qesk3swVbOrh6DLiHrlhFaoF.oNNLuZky'),
(3, 'login', '+7(333)333-33-33', 'gmail@gmail.com', '$2y$10$5e7bvv26ECqSS0GnQrhKYuHzZPrWySlPBEfhq9GhgI424Grj8G1RO');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `administration`
--
ALTER TABLE `administration`
  ADD PRIMARY KEY (`id_user`),
  ADD UNIQUE KEY `login` (`login`);

--
-- Indexes for table `courses`
--
ALTER TABLE `courses`
  ADD PRIMARY KEY (`id_courses`);

--
-- Indexes for table `enrollment`
--
ALTER TABLE `enrollment`
  ADD PRIMARY KEY (`id_record`),
  ADD KEY `id_courses` (`id_courses`,`id_user`),
  ADD KEY `id_user` (`id_user`);

--
-- Indexes for table `news`
--
ALTER TABLE `news`
  ADD PRIMARY KEY (`id`),
  ADD KEY `rubric` (`rubric`);

--
-- Indexes for table `rubric`
--
ALTER TABLE `rubric`
  ADD PRIMARY KEY (`rubric`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id_user`),
  ADD UNIQUE KEY `phone` (`phone`,`email`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `administration`
--
ALTER TABLE `administration`
  MODIFY `id_user` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `courses`
--
ALTER TABLE `courses`
  MODIFY `id_courses` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;

--
-- AUTO_INCREMENT for table `enrollment`
--
ALTER TABLE `enrollment`
  MODIFY `id_record` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=16;

--
-- AUTO_INCREMENT for table `news`
--
ALTER TABLE `news`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id_user` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `enrollment`
--
ALTER TABLE `enrollment`
  ADD CONSTRAINT `enrollment_ibfk_2` FOREIGN KEY (`id_courses`) REFERENCES `courses` (`id_courses`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints for table `news`
--
ALTER TABLE `news`
  ADD CONSTRAINT `news_ibfk_1` FOREIGN KEY (`rubric`) REFERENCES `rubric` (`rubric`) ON DELETE CASCADE ON UPDATE CASCADE;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
